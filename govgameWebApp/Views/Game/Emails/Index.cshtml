@using Ganss.XSS;
@using Markdig; 
@{
    Layout = "_GameLayout";

    PublicUser publicUser = (PublicUser)ViewData["publicUser"];

    Country country = (Country)ViewData["country"];

    ViewData["Title"] = "Emails";
    ViewData["PageName"] = "Emails";

    Email[] emails = (Email[])ViewData["emails"];

    string readOpenedColour = "darkgrey";
    string readNotOpenedColour = "lightgrey";
    string unreadNotOpenedColour = "white";
}

@{
    HtmlSanitizer sanitiser = new HtmlSanitizer();
}

<div id="main-header">
    <h1>Emails</h1>
    <br />
</div>
<div id="email-system-container" style="display: grid; grid-template-columns: 300px auto; column-gap: 20px; grid-template-rows: 50px minmax(0, 100%);">
    @if (emails.Length == 0)
    {
        <h3 style="grid-column-start: 1; grid-column-end: 2; text-align: center;">No emails</h3>
    }
    else
    {
        <ul class="no-margin-ul" style="grid-column-start: 1; grid-column-end: 2; grid-row-start: 1; grid-row-end: 3; overflow-y: auto; border-right: 1px solid black;">
            @foreach (Email email in emails)
            {
                PublicUser sender = MongoDBHelper.UsersDatabase.GetPublicUser(email.SenderId);
                <li id="email-li-@email.EmailId" class="email-li" onclick="openEmail('@email.EmailId');" style="padding: 5px 0 5px 5px; background-color: @if (email.MarkedAsRead) { @readNotOpenedColour } else { @unreadNotOpenedColour };">
                    <h4>@sender.Username</h4>
                    <h5>@email.Subject</h5>
                </li>
            }
        </ul>
    }
    <div id="actions" style="grid-column-start: 2; grid-column-end: 3; padding: 5px;">
        <button class="action-button" onclick="window.open('/Game/Emails/NewEmail', 'New email', 'height=800,width=1000,location=no,toolbar=no,menubar=no')">New email</button>
        <button class="action-button" id="block-button" onclick="blockCurrentEmailUser()" disabled>Block emails from this user</button>
    </div>
    <div style="grid-column-start: 2; grid-column-end: 3; background-color: lightgrey; padding: 5px 10px 5px 10px; overflow-y: auto;">
        <h2 id="from-line">Click on an email to view it here</h2>
        <h6 id="to-line"></h6>
        <h4 id="country-line"></h4>
        <hr />
        <h2 id="subject-line"></h2>
        <p id="body-line" style="white-space: pre-line;"></p>
    </div>
</div>

<style>
    .email-li:hover {
        cursor: pointer;
    }

    .action-button {
        height: inherit;
    }
</style>

@section Scripts
{
    <script>
        var emails = {
            @foreach (Email email in emails)
            {
                PublicUser sender = MongoDBHelper.UsersDatabase.GetPublicUser(email.SenderId);
                Country senderCountry = null;
                if (sender.IsAMinister())
                {
                    senderCountry = MongoDBHelper.CountriesDatabase.GetCountry(sender.CountryId);
                }
                <text>
                "@email.EmailId": {
                "fromUsername": "@sender.Username.Replace("`", "\\`")",
                    @if (sender.IsAMinister())
                    {
                        <text>"country": "@senderCountry.CountryName.Replace("`", "\\`")",</text>
                    }
                    else
                    {
                        <text>"country": false,</text>
                    }
                    "userId": "@email.SenderId",
                    "subject": `@email.Subject.Replace("`", "\\`")`,
                    "body": `@Html.Raw(sanitiser.Sanitize(Markdown.ToHtml(email.Body)).Replace("`", "\\`").Replace("<p>", "").Replace("</p>", ""))`,
                    "read": @email.MarkedAsRead.ToString().ToLower(),
                    "toList":
                    [
                    @foreach (string toUserId in email.RecipientIds)
                    {
                        <text>"@MongoDBHelper.UsersDatabase.GetPublicUser(toUserId).Username",</text>
                    }
                    ]
                },
                </text>
    }
        }

        var emailSystemContainer = document.getElementById("email-system-container")
        emailSystemContainer.style.height = window.innerHeight - (document.getElementsByTagName("header")[0].clientHeight + document.getElementById("main-header").clientHeight + document.getElementById("actions").clientHeight) + "px"

        var fromLine = document.getElementById("from-line");
        var toLine = document.getElementById("to-line");
        var countryLine = document.getElementById("country-line");
        var subjectLine = document.getElementById("subject-line");
        var bodyLine = document.getElementById("body-line");

        var currentlyOpenedEmailId

        function openEmail(emailId) {
            var emailLis = document.getElementsByClassName("email-li")
            for (var i = 0; i < emailLis.length; i++) {
                switch (emails[emailLis[i].id.substring(9)].read) {
                    case true:
                        emailLis[i].style.backgroundColor = "@readNotOpenedColour"
                        break

                    case false:
                        emailLis[i].style.backgroundColor = "@unreadNotOpenedColour"
                        break

                    default:
                        break
                }
            }

            fromLine.innerHTML = ""
            toLine.innerHTML = ""
            countryLine.innerHTML = ""
            subjectLine.innerHTML = ""
            bodyLine.innerHTML = ""

            var emailToOpen = emails[emailId]

            fromLine.innerHTML = "From: " + emailToOpen.fromUsername
            var toListString = ""
            for (var i = 0; i < emailToOpen.toList.length; i++) {
                toListString += emailToOpen.toList[i] + ", "
            }
            toListString = toListString.substring(0, toListString.length - 2)
            toLine.innerHTML = "To: " + toListString
            if (emailToOpen.country === false) {
                countryLine.innerHTML = "(No country)"
            }
            else {
                countryLine.innerHTML = "(Country: " + emailToOpen.country + ")"
            }
            subjectLine.innerHTML = emailToOpen.subject
            bodyLine.innerHTML = emailToOpen.body

            var emailLi = document.getElementById("email-li-" + emailId)

            emailLi.style.backgroundColor = "@readOpenedColour"

            if (!emails[emailId].read) {
                emails[emailId].read = true
                $.post(`/Game/MarkEmailAsReadUnread?emailId=${emailId}&readOrUnread=read`, function (data, status) {
                    if (data != "success") {
                        alert(data)
                        console.log("error setting email as read")
                        emails[emailId].read = false
                    }
                })
            }

            currentlyOpenedEmailId = emailId
            document.getElementById("block-button").disabled = false
        }

        function blockCurrentEmailUser() {
            if (!confirm("Are you sure you want to block " + emails[currentlyOpenedEmailId].fromUsername + "? This action is (currently) irreversible.")) {
                return
            }

            $.post(`/Game/BlockEmailsFromUser?blockUserId=${emails[currentlyOpenedEmailId].userId}&readOrUnread=read`, function (data, status) {
                if (data == "success") {
                    location.reload()
                }
                else {
                    alert(data)
                }
            })
        }
    </script>
}
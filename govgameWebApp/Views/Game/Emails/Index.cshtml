@using Ganss.XSS;
@using Markdig;
@{
    Layout = "_GameLayout";

    User user = (User)ViewData["user"];

    Country country = (Country)ViewData["country"];

    ViewData["Title"] = "Emails";
    ViewData["PageName"] = "Emails";

    UserEmail[] userEmails = (UserEmail[])ViewData["userEmails"];

    string readOpenedColour = "darkgrey";
    string readNotOpenedColour = "lightgrey";
    string unreadNotOpenedColour = "white";
}

@{
    HtmlSanitizer sanitiser = new HtmlSanitizer();
}

@using (DatabaseContext database = new DatabaseContext())
{
    <div id="main-header">
        <h1>Emails</h1>
        <br />
    </div>
    <div id="email-system-container">
        @if (userEmails.Length == 0)
        {
            <h3 id="no-emails-text">No emails</h3>
        }
        else
        {
            <ul class="no-margin-ul" id="emails-list">
                @foreach (UserEmail userEmail in userEmails)
                {
                    Email email = database.Emails.Single(e => e.EmailId == userEmail.EmailId);
                    User sender = database.Users.Single(u => u.Username == userEmail.SendingUsername);
                    <li id="email-li-@email.EmailId" class="email-li" onclick="openEmail('@email.EmailId');" style="background-color: @if (userEmail.MarkedAsRead) { @readNotOpenedColour } else { @unreadNotOpenedColour };">
                        <h4>@sender.Username</h4>
                        <h5>@email.Subject</h5>
                    </li>
                }
            </ul>
        }
        <div id="actions">
            <button class="action-button" onclick="window.open('/Game/Emails/NewEmail', 'New email', 'height=800,width=1000,location=no,toolbar=no,menubar=no')">New email</button>
        </div>
        <div id="email-viewer">
            <h2 id="from-line">Click on an email to view it here</h2>
            <h4 id="country-line"></h4>
            <h6 id="to-line"></h6>
            <hr />
            <h2 id="subject-line"></h2>
            <p id="body-line"></p>
        </div>
    </div>

    <style>
        .email-li {
            padding: 5px 0 5px 5px;
        }

            .email-li:hover {
                cursor: pointer;
            }

        .action-button {
            height: inherit;
        }

        #email-system-container {
            display: grid;
            grid-template-columns: 300px auto;
            column-gap: 20px;
            grid-template-rows: 50px minmax(0, 100%);
        }

        #no-emails-text {
            grid-column-start: 1;
            grid-column-end: 2;
            text-align: center;
        }

        #emails-list {
            grid-column-start: 1;
            grid-column-end: 2;
            grid-row-start: 1;
            grid-row-end: 3;
            overflow-y: auto;
            border-right: 1px solid black;
        }

        #actions {
            grid-column-start: 2;
            grid-column-end: 3;
            padding: 5px;
        }

        #email-viewer {
            grid-column-start: 2;
            grid-column-end: 3;
            background-color: lightgrey;
            padding: 5px 10px 5px 10px;
            overflow-y: auto;
        }

        #body-line {
            white-space: pre-line;
        }
    </style>

    @section Scripts
{
        <script>
        var emails = {
            @foreach (UserEmail userEmail in userEmails)
            {
                Email email = database.Emails.Single(e => e.EmailId == userEmail.EmailId);
                User sender = database.Users.Single(u => u.Username == userEmail.SendingUsername);
                Country senderCountry = null;
                if (sender.CountryName != null)
                {
                    senderCountry = database.Countries.Single(c => c.CountryName == sender.CountryName);
                }
                <text>
                "@email.EmailId": {
                "fromUsername": "@sender.Username.Replace("`", "\\`")",
                    @if (sender.CountryName != null)
                    {
                        <text>"country": "@senderCountry.CountryName.Replace("`", "\\`")",</text>
                    }
                    else
                    {
                        <text>"country": false,</text>
                    }
                    "userId": "@userEmail.SendingUsername",
                    "subject": `@email.Subject.Replace("`", "\\`")`,
                    "body": `@Html.Raw(sanitiser.Sanitize(Markdown.ToHtml(email.Body)).Replace("`", "\\`").Replace("<p>", "").Replace("</p>", ""))`,
                    "read": @userEmail.MarkedAsRead.ToString().ToLower(),
                    "toList":
                    [
                    @foreach (string receivingUsername in database.UserEmails.Where(ue => ue.EmailId == email.EmailId).Select(ue => ue.ReceivingUsername).ToArray())
                    {
                        <text>"@receivingUsername",</text>
                    }
                    ]
                },
                </text>
            }
        }

        var emailSystemContainer = document.getElementById("email-system-container")
        emailSystemContainer.style.height = window.innerHeight - (document.getElementsByTagName("header")[0].clientHeight + document.getElementById("main-header").clientHeight + document.getElementById("actions").clientHeight) + "px"

        var fromLine = document.getElementById("from-line");
        var toLine = document.getElementById("to-line");
        var countryLine = document.getElementById("country-line");
        var subjectLine = document.getElementById("subject-line");
        var bodyLine = document.getElementById("body-line");

        var currentlyOpenedEmailId

        function openEmail(emailId) {
            var emailLis = document.getElementsByClassName("email-li")
            for (var i = 0; i < emailLis.length; i++) {
                switch (emails[emailLis[i].id.substring(9)].read) {
                    case true:
                        emailLis[i].style.backgroundColor = "@readNotOpenedColour"
                        break

                    case false:
                        emailLis[i].style.backgroundColor = "@unreadNotOpenedColour"
                        break

                    default:
                        break
                }
            }

            fromLine.innerHTML = ""
            toLine.innerHTML = ""
            countryLine.innerHTML = ""
            subjectLine.innerHTML = ""
            bodyLine.innerHTML = ""

            var emailToOpen = emails[emailId]

            fromLine.innerHTML = "From: " + emailToOpen.fromUsername
            var toListString = ""
            for (var i = 0; i < emailToOpen.toList.length; i++) {
                toListString += emailToOpen.toList[i] + ", "
            }
            toListString = toListString.substring(0, toListString.length - 2)
            toLine.innerHTML = "To: " + toListString
            if (emailToOpen.country === false) {
                countryLine.innerHTML = "(No country)"
            }
            else {
                countryLine.innerHTML = "(Country: " + emailToOpen.country + ")"
            }
            subjectLine.innerHTML = emailToOpen.subject
            bodyLine.innerHTML = emailToOpen.body

            var emailLi = document.getElementById("email-li-" + emailId)

            emailLi.style.backgroundColor = "@readOpenedColour"

            if (!emails[emailId].read) {
                emails[emailId].read = true
                $.post(`/Game/MarkEmailAsReadUnread?emailId=${emailId}&readOrUnread=read`, function (data, status) {
                    if (data != "success") {
                        alert(data)
                        console.log("error setting email as read")
                        emails[emailId].read = false
                    }
                })
            }

            currentlyOpenedEmailId = emailId
            document.getElementById("block-button").disabled = false
        }
        </script>
    }
}
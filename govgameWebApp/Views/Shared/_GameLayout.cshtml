@using govgameSharedClasses.Helpers;
@{
    PublicUser publicUser = (PublicUser)ViewData["publicUser"];

    Country country = (Country)ViewData["country"];

    int unreadNotifications = (int)ViewData["unreadNotifications"];
    int unreadEmails = (int)ViewData["unreadEmails"];

    string flagName = CountryGenerationHelper.flagNames[country.FlagId];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @country.CountryName - Government Game</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Arvo:wght@700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap" rel="stylesheet">
</head>
<body style="font-family: 'Roboto Slab', serif;">
    <header style="overflow: hidden; margin-left: 200px; position: sticky; top: 0;">
        <a href="/Game/CountryDashboard"><img height="100" src="~/images/flags/@(flagName).png" style="float: left; margin-top: 10px; margin-bottom: 10px; margin-left: 10px;" title="Go to Country Dashboard" /></a>
        <div style="float: left; display: grid; grid-template-rows: 70px 50px;">
            <h1 style="margin-left: 10px; margin-top: 10px;" title="Go to Country Dashboard"><a href="/Game/CountryDashboard" class="underline-a">@country.CountryName</a></h1>
            <h3 style="margin-left: 10px; color: #151515;">Page: @ViewData["PageName"]</h3>
        </div>
        <nav>
            <ul class="nav justify-content-end">
                <li class="nav-item"><a class="nav-link underline-a" href="/Game/Index">Home</a></li>
                @if (unreadNotifications != 0)
                {
                    <li class="nav-item" style="background-color: darkorange;"><a class="nav-link underline-a" href="/Game/Notifications">Notifications (@unreadNotifications)</a></li>
                }
                else
                {
                    <li class="nav-item"><a class="nav-link underline-a" href="/Game/Notifications">Notifications</a></li>
                }
                @if (unreadEmails != 0)
                {
                    <li class="nav-item" style="background-color: darkorange;"><a class="nav-link underline-a" href="/Game/Emails">Emails (@unreadEmails)</a></li>
                }
                else
                {
                    <li class="nav-item"><a class="nav-link underline-a" href="/Game/Emails">Emails</a></li>
                }
                <li class="nav-item"><a class="nav-link">Signed in as: @publicUser.Username</a></li>
                <li class="nav-item"><a class="nav-link underline-a" href="/Auth/SignOut">Log out</a></li>
            </ul>
        </nav>
    </header>
    <div id="sidebar" style="position: fixed; top: 0; height: 100vh; width: 200px; background-color: #222; color: white; padding: 10px;">
        <h3>Time:</h3>
        <h5 id="time-h5">Loading...</h5>
    </div>
    <br />
    <main style="margin-left: calc(200px + 20px);">
        @RenderBody()
    </main>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })

        var connection = new signalR.HubConnectionBuilder().withUrl("/TimeManagerHub").build()

        connection.on("NewTime", function (minutesPastEpoch) {
            var timeString = ""

            timeString += Math.floor(minutesPastEpoch / 60 / 24)
            timeString += " days "
            timeString += (Math.floor(minutesPastEpoch / 60) % 24).toString().padStart(2, '0')
            timeString += ":"
            timeString += (minutesPastEpoch % 60).toString().padStart(2, '0')

            document.getElementById("time-h5").innerHTML = timeString
        })

        connection.start().catch(function (err) {
            return console.error(err.toString())
        })
    </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
